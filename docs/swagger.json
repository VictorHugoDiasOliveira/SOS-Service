{
    "swagger": "2.0",
    "info": {
        "description": "API for helping people with pix donations",
        "title": "API SOS-Service",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/createUser": {
            "post": {
                "description": "Create a new user with the provided user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User information for registration",
                        "name": "userRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    }
                }
            }
        },
        "/deleteUser/{id}": {
            "delete": {
                "description": "Deletes a user based on the ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    }
                }
            }
        },
        "/getUserByEmail/{email}": {
            "get": {
                "description": "Retrieves a user details based on user Email provided as parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Find User by Email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email of the user to be retrieved",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid user email",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    }
                }
            }
        },
        "/getUserById/{id}": {
            "get": {
                "description": "Retrieves a user details based on user ID provided as parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Find User by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user to be retrieved",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid user id",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Allows a user to log in and receive and authentication token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "userLogin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successfully, authentication token provided",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        },
                        "headers": {
                            "Authorization": {
                                "type": "string",
                                "description": "Authentication token"
                            }
                        }
                    },
                    "403": {
                        "description": "Error: invalid login credentials",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    }
                }
            }
        },
        "/updateUser": {
            "put": {
                "description": "Updates user details based on the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information for update",
                        "name": "userRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserUpdateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Insert access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest_err.RestErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.UserLogin": {
            "description": "Structure containing the necessary fields for user login",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email (required and must be a valid email address)",
                    "type": "string",
                    "example": "email@gmail.com"
                },
                "password": {
                    "description": "User's password (required and must be between 5 and 50 characters)",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5,
                    "example": "senha1234"
                }
            }
        },
        "request.UserRequest": {
            "description": "Structure containing the required fields for creating a new user",
            "type": "object",
            "required": [
                "age",
                "email",
                "name",
                "password"
            ],
            "properties": {
                "age": {
                    "description": "User's age (required, minimum of 18)\n@json\n@jsonTag age\n@jsonExample 22\n@binding required,min=5",
                    "type": "integer",
                    "minimum": 18,
                    "example": 22
                },
                "email": {
                    "description": "User's email (required, email)\n@json\n@jsonTag email\n@jsonExample email@gmail.com\n@binding required,email",
                    "type": "string",
                    "example": "email@gmail.com"
                },
                "name": {
                    "description": "User's name (required, minimum of 5 characters, maximum of 50 characters)\nExample: Victor Hugo\n@json\n@jsonTag name\n@jsonExample Victor Hugo\n@binding required,min=5,max=50",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5,
                    "example": "Victor Hugo"
                },
                "password": {
                    "description": "User's password (required, minimum of 5 characters, maximum of 50 characters)\n@json\n@jsonTag password\n@jsonExample senha1234\n@binding required,min=5,max=50",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5,
                    "example": "senha1234"
                }
            }
        },
        "request.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "User's age (omitempty, minimum of 18)\n@json\n@jsonTag age\n@jsonExample 22\n@binding omitempty,min=5",
                    "type": "integer",
                    "minimum": 18,
                    "example": 22
                },
                "name": {
                    "description": "User's name (omitempty, minimum of 5 characters, maximum of 50 characters)\nExample: Victor Hugo\n@json\n@jsonTag name\n@jsonExample Victor Hugo\n@binding omitempty,min=5,max=50",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5,
                    "example": "Victor Hugo"
                }
            }
        },
        "response.UserResponse": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 22
                },
                "email": {
                    "type": "string",
                    "example": "email@gmail.com"
                },
                "id": {
                    "type": "string",
                    "example": "6688570733fbe35fc2f33a15"
                },
                "name": {
                    "type": "string",
                    "example": "Larissa"
                }
            }
        },
        "rest_err.Causes": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "rest_err.RestErr": {
            "type": "object",
            "properties": {
                "causes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rest_err.Causes"
                    }
                },
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}